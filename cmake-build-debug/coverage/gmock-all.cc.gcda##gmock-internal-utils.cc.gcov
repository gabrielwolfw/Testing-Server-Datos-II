        -:    0:Source:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/test/googlemock/src/gmock-internal-utils.cc
        -:    0:Graph:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/test/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.gcno
        -:    0:Data:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/test/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2007, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:
        -:   31:// Google Mock - a framework for writing C++ mock classes.
        -:   32://
        -:   33:// This file defines some utilities useful for implementing Google
        -:   34:// Mock.  They are subject to change without notice, so please DO NOT
        -:   35:// USE THEM IN USER CODE.
        -:   36:
        -:   37:#include "gmock/internal/gmock-internal-utils.h"
        -:   38:
        -:   39:#include <ctype.h>
        -:   40:#include <ostream>  // NOLINT
        -:   41:#include <string>
        -:   42:#include "gmock/gmock.h"
        -:   43:#include "gmock/internal/gmock-port.h"
        -:   44:#include "gtest/gtest.h"
        -:   45:
        -:   46:namespace testing {
        -:   47:namespace internal {
        -:   48:
        -:   49:// Joins a vector of strings as if they are fields of a tuple; returns
        -:   50:// the joined string.
function _ZN7testing8internal11JoinAsTupleERKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS7_EE called 0 returned 0% blocks executed 0%
    #####:   51:GTEST_API_ std::string JoinAsTuple(const Strings& fields) {
    #####:   52:  switch (fields.size()) {
    %%%%%:   52-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   53:    case 0:
    #####:   54:      return "";
    %%%%%:   54-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   54-block  1
call    4 never executed
    $$$$$:   54-block  2
call    5 never executed
    $$$$$:   54-block  3
    #####:   55:    case 1:
    #####:   56:      return fields[0];
    %%%%%:   56-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:   57:    default:
    #####:   58:      std::string result = "(" + fields[0];
    %%%%%:   58-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:   58-block  1
call    5 never executed
    #####:   59:      for (size_t i = 1; i < fields.size(); i++) {
    %%%%%:   59-block  0
    %%%%%:   59-block  1
    %%%%%:   59-block  2
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:        result += ", ";
    %%%%%:   60-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   61:        result += fields[i];
    %%%%%:   61-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:      }
    #####:   63:      result += ")";
    %%%%%:   63-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   64:      return result;
    %%%%%:   64-block  0
call    0 never executed
        -:   65:  }
        -:   66:}
        -:   67:
        -:   68:// Converts an identifier name to a space-separated list of lower-case
        -:   69:// words.  Each maximum substring of the form [A-Za-z][a-z]*|\d+ is
        -:   70:// treated as one word.  For example, both "FooBar123" and
        -:   71:// "foo_bar_123" are converted to "foo bar 123".
function _ZN7testing8internal28ConvertIdentifierNameToWordsB5cxx11EPKc called 0 returned 0% blocks executed 0%
    #####:   72:GTEST_API_ std::string ConvertIdentifierNameToWords(const char* id_name) {
    #####:   73:  std::string result;
    %%%%%:   73-block  0
call    0 never executed
    #####:   74:  char prev_char = '\0';
    #####:   75:  for (const char* p = id_name; *p != '\0'; prev_char = *(p++)) {
    %%%%%:   75-block  0
    %%%%%:   75-block  1
branch  0 never executed
branch  1 never executed
        -:   76:    // We don't care about the current locale as the input is
        -:   77:    // guaranteed to be a valid C++ identifier name.
    #####:   78:    const bool starts_new_word = IsUpper(*p) ||
    %%%%%:   78-block  0
call    0 never executed
    #####:   79:        (!IsAlpha(prev_char) && IsLower(*p)) ||
branch  0 never executed
branch  1 never executed
    %%%%%:   79-block  0
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   79-block  1
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:   79-block  2
    %%%%%:   79-block  3
    #####:   80:        (!IsDigit(prev_char) && IsDigit(*p));
    %%%%%:   80-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   80-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   81:
    #####:   82:    if (IsAlNum(*p)) {
    %%%%%:   82-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:      if (starts_new_word && result != "")
    %%%%%:   83-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   83-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:   83-block  2
branch  5 never executed
branch  6 never executed
    %%%%%:   83-block  3
    %%%%%:   83-block  4
    %%%%%:   83-block  5
branch  7 never executed
branch  8 never executed
    #####:   84:        result += ' ';
    %%%%%:   84-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   85:      result += ToLower(*p);
    %%%%%:   85-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   86:    }
        -:   87:  }
    #####:   88:  return result;
    %%%%%:   88-block  0
    %%%%%:   88-block  1
    =====:   89:}
    $$$$$:   89-block  0
call    0 never executed
        -:   90:
        -:   91:// This class reports Google Mock failures as Google Test failures.  A
        -:   92:// user can define another class in a similar fashion if they intend to
        -:   93:// use Google Mock with a testing framework other than Google Test.
        -:   94:class GoogleTestFailureReporter : public FailureReporterInterface {
        -:   95: public:
function _ZN7testing8internal25GoogleTestFailureReporter13ReportFailureENS0_24FailureReporterInterface11FailureTypeEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 0 returned 0% blocks executed 0%
    #####:   96:  void ReportFailure(FailureType type, const char* file, int line,
        -:   97:                     const std::string& message) override {
    #####:   98:    AssertHelper(type == kFatal ?
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   98-block  0
    %%%%%:   98-block  1
    %%%%%:   98-block  2
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   98-block  3
call    6 never executed
    $$$$$:   98-block  4
call    7 never executed
    $$$$$:   98-block  5
        -:   99:                 TestPartResult::kFatalFailure :
        -:  100:                 TestPartResult::kNonFatalFailure,
        -:  101:                 file,
        -:  102:                 line,
    #####:  103:                 message.c_str()) = Message();
    %%%%%:  103-block  0
call    0 never executed
    %%%%%:  103-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
    $$$$$:  103-block  2
call    5 never executed
    #####:  104:    if (type == kFatal) {
branch  0 never executed
branch  1 never executed
    #####:  105:      posix::Abort();
    %%%%%:  105-block  0
call    0 never executed
        -:  106:    }
    #####:  107:  }
    %%%%%:  107-block  0
        -:  108:};
        -:  109:
        -:  110:// Returns the global failure reporter.  Will create a
        -:  111:// GoogleTestFailureReporter and return it the first time called.
function _ZN7testing8internal18GetFailureReporterEv called 0 returned 0% blocks executed 0%
    #####:  112:GTEST_API_ FailureReporterInterface* GetFailureReporter() {
        -:  113:  // Points to the global failure reporter used by Google Mock.  gcc
        -:  114:  // guarantees that the following use of failure_reporter is
        -:  115:  // thread-safe.  We may need to add additional synchronization to
        -:  116:  // protect failure_reporter if we port Google Mock to other
        -:  117:  // compilers.
        -:  118:  static FailureReporterInterface* const failure_reporter =
    #####:  119:      new GoogleTestFailureReporter();
    %%%%%:  119-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:  119-block  1
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  119-block  2
call    5 never executed
branch  6 never executed
branch  7 never executed
    %%%%%:  119-block  3
call    8 never executed
call    9 never executed
    $$$$$:  119-block  4
branch 10 never executed
branch 11 never executed
    $$$$$:  119-block  5
call   12 never executed
    #####:  120:  return failure_reporter;
    %%%%%:  120-block  0
    %%%%%:  120-block  1
        -:  121:}
        -:  122:
        -:  123:// Protects global resources (stdout in particular) used by Log().
        -:  124:static GTEST_DEFINE_STATIC_MUTEX_(g_log_mutex);
        -:  125:
        -:  126:// Returns true if and only if a log with the given severity is visible
        -:  127:// according to the --gmock_verbose flag.
function _ZN7testing8internal12LogIsVisibleENS0_11LogSeverityE called 0 returned 0% blocks executed 0%
    #####:  128:GTEST_API_ bool LogIsVisible(LogSeverity severity) {
    #####:  129:  if (GMOCK_FLAG(verbose) == kInfoVerbosity) {
    %%%%%:  129-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  130:    // Always show the log if --gmock_verbose=info.
    #####:  131:    return true;
    %%%%%:  131-block  0
    #####:  132:  } else if (GMOCK_FLAG(verbose) == kErrorVerbosity) {
    %%%%%:  132-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  133:    // Always hide it if --gmock_verbose=error.
    #####:  134:    return false;
    %%%%%:  134-block  0
        -:  135:  } else {
        -:  136:    // If --gmock_verbose is neither "info" nor "error", we treat it
        -:  137:    // as "warning" (its default value).
    #####:  138:    return severity == kWarning;
    %%%%%:  138-block  0
        -:  139:  }
        -:  140:}
        -:  141:
        -:  142:// Prints the given message to stdout if and only if 'severity' >= the level
        -:  143:// specified by the --gmock_verbose flag.  If stack_frames_to_skip >=
        -:  144:// 0, also prints the stack trace excluding the top
        -:  145:// stack_frames_to_skip frames.  In opt mode, any positive
        -:  146:// stack_frames_to_skip is treated as 0, since we don't know which
        -:  147:// function calls will be inlined by the compiler and need to be
        -:  148:// conservative.
function _ZN7testing8internal3LogENS0_11LogSeverityERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi called 0 returned 0% blocks executed 0%
    #####:  149:GTEST_API_ void Log(LogSeverity severity, const std::string& message,
        -:  150:                    int stack_frames_to_skip) {
    #####:  151:  if (!LogIsVisible(severity))
    %%%%%:  151-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  151-block  1
branch  3 never executed
branch  4 never executed
    #####:  152:    return;
    %%%%%:  152-block  0
        -:  153:
        -:  154:  // Ensures that logs from different threads don't interleave.
    #####:  155:  MutexLock l(&g_log_mutex);
    %%%%%:  155-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  156:
    #####:  157:  if (severity == kWarning) {
    %%%%%:  157-block  0
branch  0 never executed
branch  1 never executed
        -:  158:    // Prints a GMOCK WARNING marker to make the warnings easily searchable.
    #####:  159:    std::cout << "\nGMOCK WARNING:";
    %%%%%:  159-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  160:  }
        -:  161:  // Pre-pends a new-line to message if it doesn't start with one.
    #####:  162:  if (message.empty() || message[0] != '\n') {
    %%%%%:  162-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  162-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  162-block  2
    %%%%%:  162-block  3
    %%%%%:  162-block  4
branch  6 never executed
branch  7 never executed
    #####:  163:    std::cout << "\n";
    %%%%%:  163-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  164:  }
    #####:  165:  std::cout << message;
    %%%%%:  165-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  166:  if (stack_frames_to_skip >= 0) {
    %%%%%:  166-block  0
branch  0 never executed
branch  1 never executed
        -:  167:#ifdef NDEBUG
        -:  168:    // In opt mode, we have to be conservative and skip no stack frame.
        -:  169:    const int actual_to_skip = 0;
        -:  170:#else
        -:  171:    // In dbg mode, we can do what the caller tell us to do (plus one
        -:  172:    // for skipping this function's stack frame).
    #####:  173:    const int actual_to_skip = stack_frames_to_skip + 1;
        -:  174:#endif  // NDEBUG
        -:  175:
        -:  176:    // Appends a new-line to message if it doesn't end with one.
    #####:  177:    if (!message.empty() && *message.rbegin() != '\n') {
    %%%%%:  177-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  177-block  1
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    %%%%%:  177-block  4
branch  7 never executed
branch  8 never executed
    #####:  178:      std::cout << "\n";
    %%%%%:  178-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  179:    }
        -:  180:    std::cout << "Stack trace:\n"
    #####:  181:         << ::testing::internal::GetCurrentOsStackTraceExceptTop(
    %%%%%:  181-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  181-block  1
call    3 never executed
    $$$$$:  181-block  2
call    4 never executed
    $$$$$:  181-block  3
    #####:  182:             ::testing::UnitTest::GetInstance(), actual_to_skip);
    %%%%%:  182-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  182-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:  182-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  183:  }
    #####:  184:  std::cout << ::std::flush;
    %%%%%:  184-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  185:}
    %%%%%:  185-block  0
call    0 never executed
    $$$$$:  185-block  1
call    1 never executed
        -:  186:
function _ZN7testing8internal18GetWithoutMatchersEv called 0 returned 0% blocks executed 0%
    #####:  187:GTEST_API_ WithoutMatchers GetWithoutMatchers() { return WithoutMatchers(); }
    %%%%%:  187-block  0
call    0 never executed
        -:  188:
function _ZN7testing8internal16IllegalDoDefaultEPKci called 0 returned 0% blocks executed 0%
    #####:  189:GTEST_API_ void IllegalDoDefault(const char* file, int line) {
    #####:  190:  internal::Assert(
    %%%%%:  190-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  190-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:  190-block  2
call    7 never executed
call    8 never executed
    $$$$$:  190-block  3
call    9 never executed
    $$$$$:  190-block  4
    $$$$$:  190-block  5
call   10 never executed
        -:  191:      false, file, line,
        -:  192:      "You are using DoDefault() inside a composite action like "
        -:  193:      "DoAll() or WithArgs().  This is not supported for technical "
        -:  194:      "reasons.  Please instead spell out the default action, or "
        -:  195:      "assign the default action to an Action variable and use "
        -:  196:      "the variable in various places.");
    #####:  197:}
        -:  198:
        -:  199:}  // namespace internal
        -:  200:}  // namespace testing
