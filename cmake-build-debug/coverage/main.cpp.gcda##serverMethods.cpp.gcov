        -:    0:Source:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/serverMethods.cpp
        -:    0:Graph:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/CMakeFiles/test_tuto.dir/main.cpp.gcno
        -:    0:Data:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/CMakeFiles/test_tuto.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <boost/asio.hpp>
        -:    4:#include <opencv2/opencv.hpp>
        -:    5:#include <opencv2/core/utils/filesystem.hpp>
        -:    6:
        -:    7:#include <opencv2/core.hpp>
        -:    8:#include <boost/serialization/split_free.hpp>
        -:    9:
        -:   10:#include <boost/archive/text_iarchive.hpp>
        -:   11:#include <boost/archive/text_oarchive.hpp>
        -:   12:
        -:   13:#include "opencv2/imgcodecs.hpp"
        -:   14:#include "opencv2/highgui.hpp"
        -:   15:#include "opencv2/stitching.hpp"
        -:   16:
        -:   17:#include <string>
        -:   18:#include <utility>
        -:   19:#include <vector>
        -:   20:
        -:   21:
        -:   22:using namespace std;
        -:   23:using namespace cv;
        -:   24:
        -:   25:class ImageProcessing{
        -:   26:private: //atributes
        -:   27:    int width;
        -:   28:    int height;
        -:   29:    int delta_bright;
        -:   30:    float gamma;
        -:   31:    Mat *source;
        -:   32:    Mat *destiny;
        -:   33:public:
        -:   34:    ImageProcessing(int, int, int, float, Mat*, Mat*);
        -:   35:
        -:   36:    ImageProcessing();
        -:   37:
        -:   38:    //constructor
        -:   39:    int gaussian_blur();
        -:   40:    int gray_scale();
        -:   41:    int bright_control();
        -:   42:    int gamma_correction();
        -:   43:};
        -:   44://constructor
function _ZN15ImageProcessingC2EiiifPN2cv3MatES2_ called 0 returned 0% blocks executed 0%
    #####:   45:ImageProcessing::ImageProcessing(int _witdh, int _height, int _delta_bright, float _gamma, Mat *_source, Mat *_destiny) {
    #####:   46:    width = _witdh;
    #####:   47:    height = _height;
    #####:   48:    delta_bright = _delta_bright;
    #####:   49:    gamma = _gamma;
    #####:   50:    source = _source;
    #####:   51:    destiny = _destiny;
    #####:   52:}
function _ZN15ImageProcessing13gaussian_blurEv called 0 returned 0% blocks executed 0%
    #####:   53:int ImageProcessing::gaussian_blur() {
    #####:   54:    if (source->empty()){
    %%%%%:   54-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:        return -1;
    %%%%%:   55-block  0
        -:   56:    }else{
    #####:   57:        GaussianBlur(*source, *destiny , Size(3, 3), 0);
    %%%%%:   57-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   57-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   57-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   57-block  3
call   10 never executed
call   11 never executed
    $$$$$:   57-block  4
call   12 never executed
    $$$$$:   57-block  5
    $$$$$:   57-block  6
call   13 never executed
    $$$$$:   57-block  7
    #####:   58:        return 0;
        -:   59:    }
        -:   60:}
function _ZN15ImageProcessing10gray_scaleEv called 1 returned 100% blocks executed 31%
        1:   61:int ImageProcessing::gray_scale() {
        1:   62:    if (source->empty()){
        1:   62-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   63:        return -1;
        1:   63-block  0
        -:   64:    }else{
    #####:   65:        cvtColor(*source, *destiny, COLOR_BGR2GRAY);
    %%%%%:   65-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   65-block  1
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   65-block  2
call    7 never executed
call    8 never executed
    $$$$$:   65-block  3
call    9 never executed
    $$$$$:   65-block  4
    $$$$$:   65-block  5
call   10 never executed
    #####:   66:        return 0;
        -:   67:    }
        -:   68:}
function _ZN15ImageProcessing14bright_controlEv called 0 returned 0% blocks executed 0%
    #####:   69:int ImageProcessing::bright_control() {
    #####:   70:    if (source->empty()){
    %%%%%:   70-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:        return -1;
    %%%%%:   71-block  0
        -:   72:    }else{
    #####:   73:        source->convertTo(*destiny, -1, 1, delta_bright);
    %%%%%:   73-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   73-block  1
call    4 never executed
    $$$$$:   73-block  2
call    5 never executed
    #####:   74:        return 0;
        -:   75:    }
        -:   76:}
function _ZN15ImageProcessing16gamma_correctionEv called 0 returned 0% blocks executed 0%
    #####:   77:int ImageProcessing::gamma_correction() {
    #####:   78:    if (source->empty()){
    %%%%%:   78-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   79:        return -1;
    %%%%%:   79-block  0
        -:   80:    }else{
    #####:   81:        float invGamma = 1 / gamma;
    #####:   82:        Mat table(1, 256, CV_8U);
    %%%%%:   82-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:        uchar *p = table.ptr();
    %%%%%:   83-block  0
call    0 never executed
    #####:   84:        for (int i = 0; i < 256; ++i) {
    %%%%%:   84-block  0
branch  0 never executed
branch  1 never executed
    #####:   85:            p[i] = (uchar) (pow(i / 255.0, invGamma) * 255);
    %%%%%:   85-block  0
call    0 never executed
        -:   86:        }
    #####:   87:        LUT(*source, table, *destiny);
    %%%%%:   87-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   87-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   87-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   87-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    %%%%%:   87-block  4
call   12 never executed
call   13 never executed
call   14 never executed
    $$$$$:   87-block  5
call   15 never executed
    $$$$$:   87-block  6
    $$$$$:   87-block  7
call   16 never executed
    $$$$$:   87-block  8
    $$$$$:   87-block  9
call   17 never executed
    $$$$$:   87-block 10
    #####:   88:        return 0;
    #####:   89:    }
call    0 never executed
    $$$$$:   89-block  0
call    1 never executed
        -:   90:}
        -:   91:
function _ZN15ImageProcessingC2Ev called 1 returned 100% blocks executed 100%
        1:   92:ImageProcessing::ImageProcessing() {}
        -:   93:
        -:   94:
function _Z13Segment_imageRKN2cv3MatEiRSt6vectorIS0_SaIS0_EE called 1 returned 100% blocks executed 71%
        1:   95:int Segment_image(const cv::Mat& img, const int blockWidth, std::vector<cv::Mat>& blocks){
        -:   96:    // Checking if the image was passed correctly
       1*:   97:    if (!img.data || img.empty())
        1:   97-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   97-block  1
call    2 returned 1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   97-block  2
        1:   97-block  3
        1:   97-block  4
branch  5 taken 0 (fallthrough)
branch  6 taken 1
        -:   98:    {
    #####:   99:        std::cout << "Error al cargar imagen, no es posible empezar la segmentacion" << std::endl;
    %%%%%:   99-block  0
call    0 never executed
call    1 never executed
    #####:  100:        return EXIT_FAILURE;
        -:  101:    }
        -:  102:
        -:  103:    // Inicializa las dimensiones de la imagen
        1:  104:    int imgWidth = img.cols;
        1:  105:    int imgHeight = img.rows;
        1:  106:    std::cout << "IMAGE SIZE: " << "(" << imgWidth << "," << imgHeight << ")" << std::endl;
        1:  106-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
call    4 returned 1
call    5 returned 1
call    6 returned 1
        -:  107:
        -:  108:    // Inicializa las dimensiones del segmento
        -:  109:    int bwSize;
        1:  110:    int bhSize = img.rows;
        -:  111:
        1:  112:    int y0 = 0;
        1:  113:    int x0 = 0;
       11:  114:    while (x0 < imgWidth)
       11:  114-block  0
branch  0 taken 10
branch  1 taken 1 (fallthrough)
        -:  115:    {
       10:  116:        bwSize = ((x0 + blockWidth) > imgWidth) * (blockWidth - (x0 + blockWidth - imgWidth)) + ((x0 + blockWidth) <= imgWidth) * blockWidth;
        -:  117:
       10:  118:        blocks.push_back(img(cv::Rect(x0, y0, bwSize, bhSize)).clone());
       10:  118-block  0
call    0 returned 10
call    1 returned 10
branch  2 taken 10 (fallthrough)
branch  3 taken 0 (throw)
       10:  118-block  1
call    4 returned 10
branch  5 taken 10 (fallthrough)
branch  6 taken 0 (throw)
       10:  118-block  2
call    7 returned 10
branch  8 taken 10 (fallthrough)
branch  9 taken 0 (throw)
       10:  118-block  3
call   10 returned 10
call   11 returned 10
    $$$$$:  118-block  4
call   12 never executed
    $$$$$:  118-block  5
    $$$$$:  118-block  6
call   13 never executed
    $$$$$:  118-block  7
        -:  119:
       10:  120:        x0 = x0 + blockWidth;
        -:  121:
        -:  122:    }
        1:  123:    return EXIT_SUCCESS;
        1:  123-block  0
        -:  124:}
