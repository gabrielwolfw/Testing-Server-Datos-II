        -:    0:Source:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/test/googlemock/src/gmock-cardinalities.cc
        -:    0:Graph:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/test/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.gcno
        -:    0:Data:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/test/googlemock/CMakeFiles/gmock.dir/src/gmock-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2007, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:
        -:   31:// Google Mock - a framework for writing C++ mock classes.
        -:   32://
        -:   33:// This file implements cardinalities.
        -:   34:
        -:   35:#include "gmock/gmock-cardinalities.h"
        -:   36:
        -:   37:#include <limits.h>
        -:   38:#include <ostream>  // NOLINT
        -:   39:#include <sstream>
        -:   40:#include <string>
        -:   41:#include "gmock/internal/gmock-internal-utils.h"
        -:   42:#include "gtest/gtest.h"
        -:   43:
        -:   44:namespace testing {
        -:   45:
        -:   46:namespace {
        -:   47:
        -:   48:// Implements the Between(m, n) cardinality.
        -:   49:class BetweenCardinalityImpl : public CardinalityInterface {
        -:   50: public:
function _ZN7testing12_GLOBAL__N_122BetweenCardinalityImplC2Eii called 0 returned 0% blocks executed 0%
    #####:   51:  BetweenCardinalityImpl(int min, int max)
    #####:   52:      : min_(min >= 0 ? min : 0),
    #####:   53:        max_(max >= min_ ? max : min_) {
    %%%%%:   53-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   53-block  1
    %%%%%:   53-block  2
    #####:   54:    std::stringstream ss;
    %%%%%:   54-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   55:    if (min < 0) {
    %%%%%:   55-block  0
branch  0 never executed
branch  1 never executed
        -:   56:      ss << "The invocation lower bound must be >= 0, "
    #####:   57:         << "but is actually " << min << ".";
    %%%%%:   57-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   57-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   57-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   57-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:   58:      internal::Expect(false, __FILE__, __LINE__, ss.str());
    %%%%%:   58-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   58-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   58-block  2
call    6 never executed
    $$$$$:   58-block  3
call    7 never executed
    $$$$$:   58-block  4
    #####:   59:    } else if (max < 0) {
    %%%%%:   59-block  0
branch  0 never executed
branch  1 never executed
        -:   60:      ss << "The invocation upper bound must be >= 0, "
    #####:   61:         << "but is actually " << max << ".";
    %%%%%:   61-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   61-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   61-block  2
call    6 never executed
branch  7 never executed
branch  8 never executed
    %%%%%:   61-block  3
call    9 never executed
branch 10 never executed
branch 11 never executed
    #####:   62:      internal::Expect(false, __FILE__, __LINE__, ss.str());
    %%%%%:   62-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   62-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   62-block  2
call    6 never executed
    $$$$$:   62-block  3
call    7 never executed
    $$$$$:   62-block  4
    #####:   63:    } else if (min > max) {
    %%%%%:   63-block  0
branch  0 never executed
branch  1 never executed
    #####:   64:      ss << "The invocation upper bound (" << max
    %%%%%:   64-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   65:         << ") must be >= the invocation lower bound (" << min
    %%%%%:   65-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   65-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   66:         << ").";
    %%%%%:   66-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   66-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   67:      internal::Expect(false, __FILE__, __LINE__, ss.str());
    %%%%%:   67-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:   67-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    %%%%%:   67-block  2
call    6 never executed
    $$$$$:   67-block  3
call    7 never executed
    $$$$$:   67-block  4
        -:   68:    }
    #####:   69:  }
    %%%%%:   69-block  0
call    0 never executed
    $$$$$:   69-block  1
call    1 never executed
    $$$$$:   69-block  2
call    2 never executed
        -:   70:
        -:   71:  // Conservative estimate on the lower/upper bound of the number of
        -:   72:  // calls allowed.
function _ZNK7testing12_GLOBAL__N_122BetweenCardinalityImpl22ConservativeLowerBoundEv called 0 returned 0% blocks executed 0%
    #####:   73:  int ConservativeLowerBound() const override { return min_; }
    %%%%%:   73-block  0
function _ZNK7testing12_GLOBAL__N_122BetweenCardinalityImpl22ConservativeUpperBoundEv called 0 returned 0% blocks executed 0%
    #####:   74:  int ConservativeUpperBound() const override { return max_; }
    %%%%%:   74-block  0
        -:   75:
function _ZNK7testing12_GLOBAL__N_122BetweenCardinalityImpl22IsSatisfiedByCallCountEi called 0 returned 0% blocks executed 0%
    #####:   76:  bool IsSatisfiedByCallCount(int call_count) const override {
    #####:   77:    return min_ <= call_count && call_count <= max_;
    %%%%%:   77-block  0
branch  0 never executed
branch  1 never executed
    %%%%%:   77-block  1
branch  2 never executed
branch  3 never executed
    %%%%%:   77-block  2
    %%%%%:   77-block  3
    %%%%%:   77-block  4
        -:   78:  }
        -:   79:
function _ZNK7testing12_GLOBAL__N_122BetweenCardinalityImpl22IsSaturatedByCallCountEi called 0 returned 0% blocks executed 0%
    #####:   80:  bool IsSaturatedByCallCount(int call_count) const override {
    #####:   81:    return call_count >= max_;
    %%%%%:   81-block  0
        -:   82:  }
        -:   83:
        -:   84:  void DescribeTo(::std::ostream* os) const override;
        -:   85:
        -:   86: private:
        -:   87:  const int min_;
        -:   88:  const int max_;
        -:   89:
        -:   90:  GTEST_DISALLOW_COPY_AND_ASSIGN_(BetweenCardinalityImpl);
        -:   91:};
        -:   92:
        -:   93:// Formats "n times" in a human-friendly way.
function _ZN7testing12_GLOBAL__N_111FormatTimesEi called 0 returned 0% blocks executed 0%
    #####:   94:inline std::string FormatTimes(int n) {
    #####:   95:  if (n == 1) {
    %%%%%:   95-block  0
branch  0 never executed
branch  1 never executed
    #####:   96:    return "once";
    %%%%%:   96-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   96-block  1
call    4 never executed
    $$$$$:   96-block  2
call    5 never executed
    $$$$$:   96-block  3
call    6 never executed
    #####:   97:  } else if (n == 2) {
    %%%%%:   97-block  0
branch  0 never executed
branch  1 never executed
    #####:   98:    return "twice";
    %%%%%:   98-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   98-block  1
call    4 never executed
    $$$$$:   98-block  2
call    5 never executed
    $$$$$:   98-block  3
call    6 never executed
        -:   99:  } else {
    #####:  100:    std::stringstream ss;
    %%%%%:  100-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  101:    ss << n << " times";
    %%%%%:  101-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    %%%%%:  101-block  1
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  102:    return ss.str();
    %%%%%:  102-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  103:  }
    %%%%%:  103-block  0
call    0 never executed
    $$$$$:  103-block  1
call    1 never executed
        -:  104:}
        -:  105:
        -:  106:// Describes the Between(m, n) cardinality in human-friendly text.
function _ZNK7testing12_GLOBAL__N_122BetweenCardinalityImpl10DescribeToEPSo called 0 returned 0% blocks executed 0%
    #####:  107:void BetweenCardinalityImpl::DescribeTo(::std::ostream* os) const {
    #####:  108:  if (min_ == 0) {
    %%%%%:  108-block  0
branch  0 never executed
branch  1 never executed
    #####:  109:    if (max_ == 0) {
    %%%%%:  109-block  0
branch  0 never executed
branch  1 never executed
    #####:  110:      *os << "never called";
    %%%%%:  110-block  0
call    0 never executed
    #####:  111:    } else if (max_ == INT_MAX) {
    %%%%%:  111-block  0
branch  0 never executed
branch  1 never executed
    #####:  112:      *os << "called any number of times";
    %%%%%:  112-block  0
call    0 never executed
        -:  113:    } else {
    #####:  114:      *os << "called at most " << FormatTimes(max_);
    %%%%%:  114-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  114-block  1
call    5 never executed
    $$$$$:  114-block  2
call    6 never executed
    $$$$$:  114-block  3
call    7 never executed
        -:  115:    }
    #####:  116:  } else if (min_ == max_) {
    %%%%%:  116-block  0
branch  0 never executed
branch  1 never executed
    #####:  117:    *os << "called " << FormatTimes(min_);
    %%%%%:  117-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  117-block  1
call    5 never executed
    $$$$$:  117-block  2
call    6 never executed
    $$$$$:  117-block  3
call    7 never executed
    #####:  118:  } else if (max_ == INT_MAX) {
    %%%%%:  118-block  0
branch  0 never executed
branch  1 never executed
    #####:  119:    *os << "called at least " << FormatTimes(min_);
    %%%%%:  119-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  119-block  1
call    5 never executed
    $$$$$:  119-block  2
call    6 never executed
        -:  120:  } else {
        -:  121:    // 0 < min_ < max_ < INT_MAX
    #####:  122:    *os << "called between " << min_ << " and " << max_ << " times";
    %%%%%:  122-block  0
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
        -:  123:  }
    #####:  124:}
    %%%%%:  124-block  0
        -:  125:
        -:  126:}  // Unnamed namespace
        -:  127:
        -:  128:// Describes the given call count to an ostream.
function _ZN7testing11Cardinality25DescribeActualCallCountToEiPSo called 0 returned 0% blocks executed 0%
    #####:  129:void Cardinality::DescribeActualCallCountTo(int actual_call_count,
        -:  130:                                            ::std::ostream* os) {
    #####:  131:  if (actual_call_count > 0) {
    %%%%%:  131-block  0
branch  0 never executed
branch  1 never executed
    #####:  132:    *os << "called " << FormatTimes(actual_call_count);
    %%%%%:  132-block  0
call    0 never executed
call    1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    %%%%%:  132-block  1
call    5 never executed
    $$$$$:  132-block  2
call    6 never executed
        -:  133:  } else {
    #####:  134:    *os << "never called";
    %%%%%:  134-block  0
call    0 never executed
        -:  135:  }
    #####:  136:}
    %%%%%:  136-block  0
        -:  137:
        -:  138:// Creates a cardinality that allows at least n calls.
function _ZN7testing7AtLeastEi called 0 returned 0% blocks executed 0%
    #####:  139:GTEST_API_ Cardinality AtLeast(int n) { return Between(n, INT_MAX); }
    %%%%%:  139-block  0
call    0 never executed
        -:  140:
        -:  141:// Creates a cardinality that allows at most n calls.
function _ZN7testing6AtMostEi called 0 returned 0% blocks executed 0%
    #####:  142:GTEST_API_ Cardinality AtMost(int n) { return Between(0, n); }
    %%%%%:  142-block  0
call    0 never executed
        -:  143:
        -:  144:// Creates a cardinality that allows any number of calls.
function _ZN7testing9AnyNumberEv called 0 returned 0% blocks executed 0%
    #####:  145:GTEST_API_ Cardinality AnyNumber() { return AtLeast(0); }
    %%%%%:  145-block  0
call    0 never executed
        -:  146:
        -:  147:// Creates a cardinality that allows between min and max calls.
function _ZN7testing7BetweenEii called 0 returned 0% blocks executed 0%
    #####:  148:GTEST_API_ Cardinality Between(int min, int max) {
    #####:  149:  return Cardinality(new BetweenCardinalityImpl(min, max));
    %%%%%:  149-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:  149-block  1
call    4 never executed
    $$$$$:  149-block  2
call    5 never executed
        -:  150:}
        -:  151:
        -:  152:// Creates a cardinality that allows exactly n calls.
function _ZN7testing7ExactlyEi called 0 returned 0% blocks executed 0%
    #####:  153:GTEST_API_ Cardinality Exactly(int n) { return Between(n, n); }
    %%%%%:  153-block  0
call    0 never executed
        -:  154:
        -:  155:}  // namespace testing
