        -:    0:Source:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/main.cpp
        -:    0:Graph:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/CMakeFiles/test_tuto.dir/main.cpp.gcno
        -:    0:Data:/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/cmake-build-debug/CMakeFiles/test_tuto.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:#include <gtest/gtest.h>
        -:    3:#include <gmock/gmock.h>
        -:    4:#include "serverMethods.cpp"
        -:    5:
        -:    6:
        -:    7:using namespace std;
        -:    8:
        -:    9:
        -:   10:const Mat image = imread("/home/gabrielwolf/Documents/Extraclase-II/Testing-Server-Datos-II/stitchTry.png",IMREAD_COLOR);
        -:   11:
        -:   12:
        -:   13://clase funciones: contiene los metodos usados en el server
        -:   14:class funciones{
        -:   15:public:
function _ZN9funciones13segmentImage_ERKN2cv3MatEiRSt6vectorIS1_SaIS1_EE called 1 returned 100% blocks executed 100%
        1:   16:    bool segmentImage_(const Mat& img,const int blockWidth, vector<cv::Mat>& blocks){
        1:   17:        Segment_image(img, blockWidth, blocks);
        1:   17-block  0
call    0 returned 1
        1:   18:        return 1;
        -:   19:    }
        -:   20:};
        -:   21:
        -:   22:class applySegmenting{
        -:   23:public:
function _ZN15applySegmenting17get_SegmentImage_ER9funcionesRKN2cv3MatEiRSt6vectorIS3_SaIS3_EE called 1 returned 100% blocks executed 83%
        1:   24:    bool get_SegmentImage_(funciones& funcion1,const Mat& img,const int blockWidth, vector<cv::Mat>& blocks){
        1:   25:        if(!(image.empty())){
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   26:            funcion1.segmentImage_(img,blockWidth,blocks);
        1:   26-block  0
call    0 returned 1
        1:   27:            return true;
        -:   28:        }else{
    #####:   29:            return false;
    %%%%%:   29-block  0
        -:   30:        }
        -:   31:    }
        -:   32:};
        -:   33:class applyFilters{
        -:   34:public:
function _ZN12applyFilters14get_gray_scaleER15ImageProcessing called 1 returned 100% blocks executed 83%
        1:   35:    bool get_gray_scale(ImageProcessing& funcion2){
        1:   36:        if(!(image.empty())){
        1:   36-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   37:            funcion2.gray_scale();
        1:   37-block  0
call    0 returned 1
        1:   38:            return true;
        -:   39:        }else{
    #####:   40:            return false;
    %%%%%:   40-block  0
        -:   41:        }
        -:   42:    }
        -:   43:};
        -:   44:
        -:   45:
        -:   46:
        -:   47:
        -:   48://Crear un TEST para el mockObject "mockSegmentingImg"
        -:   49:class MockSegmentingImg: public funciones{
        -:   50:public:
        -:   51:    MOCK_METHOD(bool,segmentImage_,(const Mat& img,const int blockWidth, vector<cv::Mat>& blocks));
        -:   52:};
        -:   53:
        -:   54:class MockFilterGray: public ImageProcessing{
        -:   55:public:
        -:   56:    MOCK_METHOD(bool,gray_scale,(Mat *_source, Mat *_destiny));
        -:   57:};
        -:   58:
        -:   59:
        4:   60:TEST(PruebaSegmentar,Prueba1){
        1:   61:    vector<Mat> blocks;
        1:   62:    MockSegmentingImg mockSegmentingImg;
        -:   63:    applySegmenting Segment_image;
       1*:   64:    EXPECT_TRUE(Segment_image.get_SegmentImage_(mockSegmentingImg,image,65,blocks));
        1:   65:}
------------------
_ZN28PruebaSegmentar_Prueba1_TestC2Ev:
function _ZN28PruebaSegmentar_Prueba1_TestC2Ev called 1 returned 100% blocks executed 100%
        1:   60:TEST(PruebaSegmentar,Prueba1){
        1:   60-block  0
call    0 returned 1
------------------
_ZN28PruebaSegmentar_Prueba1_TestD0Ev:
function _ZN28PruebaSegmentar_Prueba1_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   60:TEST(PruebaSegmentar,Prueba1){
        1:   60-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN28PruebaSegmentar_Prueba1_TestD2Ev:
function _ZN28PruebaSegmentar_Prueba1_TestD2Ev called 1 returned 100% blocks executed 100%
        1:   60:TEST(PruebaSegmentar,Prueba1){
        1:   60-block  0
call    0 returned 1
------------------
_ZN28PruebaSegmentar_Prueba1_Test8TestBodyEv:
function _ZN28PruebaSegmentar_Prueba1_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:   60:TEST(PruebaSegmentar,Prueba1){
        1:   61:    vector<Mat> blocks;
        1:   61-block  0
call    0 returned 1
        1:   62:    MockSegmentingImg mockSegmentingImg;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   63:    applySegmenting Segment_image;
       1*:   64:    EXPECT_TRUE(Segment_image.get_SegmentImage_(mockSegmentingImg,image,65,blocks));
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   64-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   64-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   64-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   64-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   64-block  6
call   20 never executed
call   21 never executed
call   22 never executed
        1:   64-block  7
call   23 returned 1
    $$$$$:   64-block  8
call   24 never executed
    $$$$$:   64-block  9
    $$$$$:   64-block 10
call   25 never executed
    $$$$$:   64-block 11
    $$$$$:   64-block 12
call   26 never executed
    $$$$$:   64-block 13
    $$$$$:   64-block 14
call   27 never executed
        1:   65:}
call    0 returned 1
call    1 returned 1
    $$$$$:   65-block  0
call    2 never executed
    $$$$$:   65-block  1
call    3 never executed
------------------
        -:   66:
        4:   67:TEST(PruebaFiltroGray,Prueba2){
        1:   68:    vector<Mat> blocksGray;
        1:   69:    MockFilterGray mockFilterGray;
        -:   70:    applyFilters grayImg;
       1*:   71:    EXPECT_TRUE(grayImg.get_gray_scale(mockFilterGray));
        1:   72:}
------------------
_ZN29PruebaFiltroGray_Prueba2_TestC2Ev:
function _ZN29PruebaFiltroGray_Prueba2_TestC2Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(PruebaFiltroGray,Prueba2){
        1:   67-block  0
call    0 returned 1
------------------
_ZN29PruebaFiltroGray_Prueba2_TestD0Ev:
function _ZN29PruebaFiltroGray_Prueba2_TestD0Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(PruebaFiltroGray,Prueba2){
        1:   67-block  0
call    0 returned 1
call    1 returned 1
------------------
_ZN29PruebaFiltroGray_Prueba2_TestD2Ev:
function _ZN29PruebaFiltroGray_Prueba2_TestD2Ev called 1 returned 100% blocks executed 100%
        1:   67:TEST(PruebaFiltroGray,Prueba2){
        1:   67-block  0
call    0 returned 1
------------------
_ZN29PruebaFiltroGray_Prueba2_Test8TestBodyEv:
function _ZN29PruebaFiltroGray_Prueba2_Test8TestBodyEv called 1 returned 100% blocks executed 31%
        1:   67:TEST(PruebaFiltroGray,Prueba2){
        1:   68:    vector<Mat> blocksGray;
        1:   68-block  0
call    0 returned 1
        1:   69:    MockFilterGray mockFilterGray;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   70:    applyFilters grayImg;
       1*:   71:    EXPECT_TRUE(grayImg.get_gray_scale(mockFilterGray));
        1:   71-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   71-block  1
call    3 returned 1
call    4 returned 1
branch  5 taken 0 (fallthrough)
branch  6 taken 1
    %%%%%:   71-block  2
call    7 never executed
branch  8 never executed
branch  9 never executed
    %%%%%:   71-block  3
call   10 never executed
branch 11 never executed
branch 12 never executed
    %%%%%:   71-block  4
call   13 never executed
call   14 never executed
branch 15 never executed
branch 16 never executed
    %%%%%:   71-block  5
call   17 never executed
branch 18 never executed
branch 19 never executed
    %%%%%:   71-block  6
call   20 never executed
call   21 never executed
call   22 never executed
        1:   71-block  7
call   23 returned 1
    $$$$$:   71-block  8
call   24 never executed
    $$$$$:   71-block  9
    $$$$$:   71-block 10
call   25 never executed
    $$$$$:   71-block 11
    $$$$$:   71-block 12
call   26 never executed
    $$$$$:   71-block 13
    $$$$$:   71-block 14
call   27 never executed
        1:   72:}
call    0 returned 1
call    1 returned 1
    $$$$$:   72-block  0
call    2 never executed
    $$$$$:   72-block  1
call    3 never executed
------------------
        -:   73:
        -:   74:
        -:   75:/**
        -:   76: * @param argc
        -:   77: * @param argv
        -:   78: * @return
        -:   79: */
function main called 1 returned 100% blocks executed 100%
        1:   80:int main(int argc, char *argv[]) {
        -:   81:
        1:   82:    testing::InitGoogleTest(&argc, argv);
        1:   82-block  0
call    0 returned 1
        1:   83:    return RUN_ALL_TESTS();
call    0 returned 1
        -:   84:}
        -:   85:
